version: "3.8"

volumes:
  logs:
  elasticsearch:


networks:
  elk:
    driver: bridge

services:
  server:
    build:
      context: .
      dockerfile: cmd/server/Dockerfile
    restart:
      always
    hostname: server
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/home/go/github.com/WatherMG/topmetrics/logs
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
#  agent:
#    build:
#      context: .
#      dockerfile: cmd/agent/Dockerfile
#    depends_on:
#      - server
#  agent2:
#    build:
#      context: .
#      dockerfile: cmd/agent/Dockerfile
#    depends_on:
#      - server
#      - logstash
  logstash:
    image: logstash:8.7.1
    command: bash -c "bin/logstash-plugin install logstash-codec-protobuf && bin/logstash"
    networks:
      - elk
    ports:
      - "5044:5044"
      - "5045:5045"
    volumes:
      - ./configs/logstash/pipelines/:/usr/share/logstash/config/pipelines/:ro
      - ./configs/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./configs/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logs:/usr/share/logstash/input:ro
    depends_on:
      elasticsearch:
        condition: service_healthy


  elasticsearch:
    image: elasticsearch:8.7.1
    volumes:
      - type: bind
        source: ./configs/elasticsearch/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - ./data/elasticsearch:/usr/share/elasticsearch/data:rw
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - elk
    healthcheck:
      test: [ "CMD", "curl", "-s", "-f", "http://localhost:9200/_cat/health" ]
      interval: 3s
      timeout: 3s
      retries: 10

  kibana:
    image: kibana:8.7.1
    volumes:
      - type: bind
        source: ./configs/kibana/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    healthcheck:
      test: [ "CMD", "curl", "-s", "-f", "http://localhost:5601/api/status" ]
      interval: 3s
      timeout: 3s
      retries: 50
    depends_on:
      - elasticsearch


